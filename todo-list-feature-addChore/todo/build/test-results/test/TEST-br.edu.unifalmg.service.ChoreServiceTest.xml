<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="br.edu.unifalmg.service.ChoreServiceTest" tests="19" skipped="0" failures="0" errors="0" timestamp="2023-09-29T18:10:25" hostname="suporte-OptiPlex-3050" time="0.076">
  <properties/>
  <testcase name="toggleChoreWhenTheDeadLineIsInvalidWhenStatusIsCompletedThrowAnException()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.024"/>
  <testcase name="#filterChores &gt; When the filter is ALL &gt; When the list is empty &gt; Return all chores" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.002"/>
  <testcase name="filterChoresWhenTheFilterIsCompletedWhenListIsNotEmptyReturnTheFilteredChores()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.004"/>
  <testcase name="filterChoresWhenTheFilterIsUncompletedWhenListIsNotEmptyReturnTheFilteredChores()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.003"/>
  <testcase name="deleteChoreWhenListIsEmptyThrowAnException()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.002"/>
  <testcase name="addSingleChore()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.001"/>
  <testcase name="#filterChores &gt; When the filtter is ALL &gt; When the list is not empty &gt; Return All chores" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.002"/>
  <testcase name="#addChore &gt; When adding a chore &gt; When the chore already exists &gt; Throw an exception" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.001"/>
  <testcase name="deleteChoreWhenTheListNotEmptyWheTheChoreExistsDeleteTheChore()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.002"/>
  <testcase name="toggleChoreWhenTheChoreDoesNotExistThrowAnException()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.001"/>
  <testcase name="addMultipleChore()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.002"/>
  <testcase name="toggleChoreTheDeadLineIsInvalidWhenTheStatusInUncompletedToggleTheChore()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.001"/>
  <testcase name="togglerChoreWhenTheDeadlineIsValidWhenToggleTheChoreTwiceToggleTheChore()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.002"/>
  <testcase name="#addChore &gt; When the deadline is invalid &gt; Throw an exception" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.002"/>
  <testcase name="addChoreWhenTheDescriptionIsInvalidThrowAnException()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.004"/>
  <testcase name="filterChoresWhenTheFilterIsUncompletedWhenListIsEmptyReturnAnEmptyList()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.001"/>
  <testcase name="filterChoresWhenTheFilterIsCompleteWhenTheListIsEmptyReturnAnEmptyList()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.001"/>
  <testcase name="deleteChoreWhenTheListIsNotEmptyWheTheChoreDoesNotExistThrowAnException()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.001"/>
  <testcase name="toggleChoreWhenTheDeadLineIsValidToggleTheChore()" classname="br.edu.unifalmg.service.ChoreServiceTest" time="0.001"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
